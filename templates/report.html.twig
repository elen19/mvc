{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
<main>
    <h1>Report</h1>
    <a href="#kmom01">Kmom01</a>
    <a href="#kmom02">Kmom02</a>
    <a href="#kmom03">Kmom03</a>
    <a href="#kmom04">Kmom04</a>
    <a href="#kmom05">kmom05</a>
</main>
<div class="report">
    <h2 id="kmom01">Kmom01</h2>
    <p>Har programmerat objektorienterat i både Python från förra LP men även C++ kurser från spelprogrammering för 2-3år sedan.</p>
    <p>PHPs klasser och metoder är sig likt en blandning av C++ och Python. Man skapar en klass med konstruktorn "class", i den kodar man attribute som klassen ska ha. För att sedan 
        skapa ett objekt av klassen används "new" följt av klassens namn. För att kunna jobba med samma klass används "this".
    </p>
    <p>Några grunder som kan vara bra att veta är följande:</p>
    <li>Klassens namn börjar med en stor bokstav (för konventionens skull) och bör vara unikt inom projektet.</li>
    <li>Klassens attribut beskriver egenskaperna hos objektet som baseras på klassen.</li>
    <li>Nyckelordet "this" refererar till det aktuella objektet och används för att komma åt dess attribut och metoder inuti klassen.</li>
    <li>En klass kan ärva attribut och metoder från en annan klass genom arv.</li>

    <p>Kodstrukturen känns inte så speciell än så länge. Det känns som det är saker som jag redan gjort, även att det inte är det. Strukturen var enkelt att följa och få en bra grund.</p>
    <p>Har inte läst direkt något ur PHP the right way. Dock när jag skumma igenom lite verkar de har bra förklarning på hur man kan jobba med databaser mot PHP klienter.</p>
    <p>Min TIL är hur man gör JSON sidor. Har inte gjort något liknande innan, vad jag minns i alla fall, så det det var lärorikt.</p>

    <br>
    <h2 id="kmom02">Kmom02</h2>
    <p>Arv (Inheritance) i PHP innebär att en klass kan ärva egenskaper och metoder från en annan överordnad klass. Detta möjliggör återanvändning av kod och sparar tid och arbete. 
        För att ärva från en annan klass används nyckelordet "extends".</p>
    <p>Komposition (Composition) i PHP innebär att en klass kan bestå av andra objekt. Detta gör det möjligt att bygga komplexa system genom att kombinera mindre delar. 
        För att använda komposition i PHP skapas en instans av en klass inuti en annan klass.</p>
    <p>Interface i PHP beskriver en uppsättning av metoder som en klass måste implementera. Detta gör det möjligt att skapa en standardiserad uppsättning av funktioner som kan användas av flera klasser. 
        För att definiera ett interface används nyckelordet "interface".</p>
    <p>Trait i PHP är en mekanism för att återanvända kod på tvärs av klasser. Detta innebär att en grupp av metoder kan definieras i en trait och sedan inkluderas i flera klasser. 
        För att använda en trait i PHP används nyckelordet "use".</p>
    <p>Jag började med att göra card klassen. Tanken var först att jag skulle göra utseendet på kort i den klassen också så mitt "mål" var att skapa ett kort och rita ut det i början. Det fungerade helt okej men sättet 
        jag gjorde det på så hade jag behövt ha 52 rader kod vilket jag insåg tidigt inte skulle bli snyggt. Isället skapade jag CardGraphic klassen och började skapa korten med hjälp av arv i den klassen. 
        När de två klasserna fungerade och jag kunde skapa olika kort bestämde jag mig för att göra kortleken. Det gick ganska enkelt, det svåra var att hitta ett bra sätt att sortera de på. Men jag löste det på ett helt okej sätt. 
        Jag kan nog göra det snyggare kodmessigt på min sida som visar alla kort sorterade men jag tycker att utseendet på sidan blev snyggt.
    </p>
    <p>När jag kom till shuffle trodde jag att det skulle bli betydligt svårare men en liten googling visade sig att det redan finns en shuffle funktion så använde den. </p>
    <p>Eftersom jag gick lite dumt rakt på utan att göra övningen började få problem vid draw. Hade inte koll på hur man jobbade i session så jag fick göra lite research på det. Tycker det blev bra och jobbar med session på alla kortsidor.</p>
    <p>När all kod fungerade bra så gjorde jag UML diagrammet.</p>
    <p>Efter UML skapade jag API sidorna. Det blev mycket copy-paste från förra delen förutom när man skulle dra flera kort. Gjorde ett litet skript för att ta hand om det för jag hittade ingen bättre lösning i Symfony.</p>
    <p>Osäker på vilket flödesdiagram ni syftar på. Uppgiften var byggd på ett bra sätt att jobba uppifrån och ner. Det gav bra fritänk och gjorde att uppgiften kändes mer motiverande att lösa istället för att man måste hålla sig inom ramar. Det var några 
        ramar men det är så klart för att kunna få en produkt som en kund frågar efter. Annars var det kul med mer frihet.
    </p>
    <p>Min TIL är hur man jobbar med session i Symfony.</p>

    <br>
    <h2 id="kmom03">Kmom03</h2>
    <p>Ska jag vara ärlig gjorde jag Psuedokod och flödesdiagram sist av allt. Dels för jag bara skummade igenom uppgiften och läste inte den delen tillräckligt noga men även för jag tycker det är enklare att bara jobba från uppgiften jag fick. 
        Det känns som jag "låser" mig själv om jag planerar hur allt ska fungera innan jag börja koda. Flödesdiagram kan jag känna kan hjälpa men pseudokod, bygga klassdiagram och liknande innan jag ens har skrivit kod är bara jobbigt och låser mitt 
        "fria tänk". Om jag bara har instruktioner att jobba med så känner jag mig mer effektiv än om jag ska planera ALLT innan jag ens har fixat min första klass.
    </p>
    <p>Jag jobba mycket med koden som skapades förra kmom. Klasserna hade redan all kod jag behövde. Mycket blev att jobba i kontrollen för att få det att fungera. Jag blev lite bakahållen från composer lint. Kunde inte skriva koden så som jag ville då bland 
        annat fick jag inte ha else-statser, använda klassfunktioner från saker jag tar från session utan att dubbelkolla att objektet är av den klass jag skapade och skickade in i sessionen osv. Det jag kan förbättra är att ha mindre krav för att koden ska bli snyggare 
        annars är jag nöjd över hur den blev.
    </p>
    <p>Ramverket i helhet känns ganska enkelt att jobba med. Det är, som nyss nämdes, den nya composer lint som gör det jobbigare att jobba med. Man måste koda så att det är helt omöjligt att bli fel vilket göra att koden blir ganska ful och jobbigare att läsa, enligt mig. 
        Utöver det så har jag inga problem än så länge. Det känns väldigt enkelt att jobba med klasser och liknar C++ en hel del vilket jag har jobbat mest med sedan tidigare.
    </p>
    <p>Min TIL blir hur man kodar för composer lint inte ska klaga.</p>

    <br>
    <h2 id="kmom04">Kmom04</h2>
    <p>Att jobba med phpunit var väldigt enkelt. Gjort liknande typer av testning i Python kurser. Dock var installationen väldigt otydlig tyckte jag. Jag tänker att uppgifter är det enda som är "måste". Dock klarar man inte av att göra uppgiften utan att fixa labbmiljö, göra övningen och göra 
        delen i introduktion. Jag tycker att om det är "måste" delar som finns med för att allt ska fungera ska de ligga under rubriken "uppgifter" eller typ "måsten för uppgiften". Satt i 2-3h och jobbade runt i cirklar innan jag fick mina tester att fungera och generera dokumentet så som önskades. 
        Hade det inte varit för discord hade jag nog suttit med det i ytterligare någon timme.
    </p>
    <p>Fick 100% kodtäckning (inte med controller utan bara cards). Det kändes bäst att göra allt och då blev det ganska enkelt 100%.</p>
    <p>Jag tycker koden var testbar. Konstruktorn kunde kanske inte testas helt på alla då det t.ex. inte gåt att skapa ett card utan att något finns med i konstruktorn. Går kanske att ändra koden för att anpassa det men då jag har programmerat runt detta i åtanke känner jag att det inte behövs.</p>
    <p>Ändrade inget i min kod. Är nöjd över hur den är då jag är ensam användare av den.</p>
    <p>Är koden lätt att testa så är den ren enligt mig. Det känns som om man måste bygga en extrem sats för att testa en funktion så borde koden kunna snyggastill, kortast ner eller göras om.</p>
    <p>Min TIL blir väl att tryck på alla länkar som finns i uppgiftinstruktionen, oavsett vart i dokumentet den...</p>

    <h2 id="kmom05">Kmom05</h2>
    <p>Övningen gick bra. Var inget speciellt med den.</p>
    <p>Tänkte inte direkt på något. Jag bara gjorde uppgiften upp och ner och sen så fixade jag lite style för att det skulle bli snyggare. Annars är det väldigt basic.</p>
    <p>Det kändes bra att jobba med ORM. Uppgiften hjälpte att komma igång men det kändes ganska likt procedures i SQL. I alla fall vissa delar. Dock var det enklare att jobba och förstå ORM, kan vara för jag nu hade erfarenheten från Databaskursen.</p>
    <p>Har ingen djup uppfattning ännu. Det känns vädligt enkelt och smidigt att jobba med jämfört när vi gjorde JavaScript i databaskursen. Det kändes som jag hade lite mer "kontroll" i den kursen medan denna vecka har jag bara gjort det jag har hittat och fungerat. 
        Missade föreläsningen och gick lite blint in i denna vecka så kan vara därför det kändes lite otydligt också. Kommer se ikapp i helgen i hopp om djupare förestålese. Men grunderna fungerade bra.
    </p>
    <p>Min TIL är hur smidigt det var att skapa databaser och koppla kontroller och även form till den skapade databasen.</p>
</div>
{% endblock %}
